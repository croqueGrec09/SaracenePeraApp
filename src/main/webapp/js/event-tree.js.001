/* Code von Gwenlyn Tiedemann, mit der Visualisierungsvorlage bis Zeile 158 von Mike Bostock ( https://bl.ocks.org/mbostock/4339083) */

/* JSON-Datei mit Hierarchie der Auffälligkeiten erstellt von Alex Abboud in Zusammenarbeit mit Dominik Leyendecker und Britta Hermans, 
   mithilfe der von Gwenlyn Tiedemann herausgesuchten Daten*/

/* Der dynamic Tree zeigt in einer Hierachie die Auffälligkeiten an.
 *  Durch anklicken des letzten Nodes werden in einer Liste rechts alle Quellen aufgelistet, 
 *  in denen diese Auffälligkeit aufgeführt wird.
 *  Klickt man wiederum eine der Quellen in der Liste an, wird der Inhalt dieser Quelle unter den dynamic Tree gezeigt. 
 *  (dritte Variante der Quellendarstellung, wie in der Tabelle für erwähnte Personen)
 *  Die zugehörigen Quellenstellen zu der Quelle werden links neben dem Quelleninhalt angezeigt und können durch Anklicken auch angezeigt werden.
 *  Rechts neben der Quellendarstellung befindet sich weiterhin die Auflistung der Vorkommnisse.*/

$(document).ready(function(){
	
//dynamic Tree mithilfe der Daten aus der JSON-Datei erstellen
	var out;

	var margin = {top: 20, right: 120, bottom: 20, left: 120},
	    width = 580 - margin.right - margin.left,
	    height = 700 - margin.top - margin.bottom;


	var i = 0,
	    duration = 750,
	    root;

	var classChanger;

	var tree = d3.layout.tree()
	    .size([height, width]);

	var diagonal = d3.svg.diagonal()
	    .projection(function(d) { return [d.y, d.x]; });

	var svg02 = d3.select("#dynamicTree").append("svg")
	    .attr("width", width + margin.right + margin.left)
	    .attr("height", height + margin.top + margin.bottom)
	  .append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	d3.json("data/flare_map_final_0.1.json", function(error, flare) {
	  if (error) throw error;

	  root = flare;
	  root.x0 = height / 2;
	  root.y0 = 0;

	  function collapse(d) {
	    if (d.children) {
	      d._children = d.children;
	      d._children.forEach(collapse);
	      d.children = null;
	    }
	  }
	  root.children.forEach(collapse);
	  update_auff(root);
	});


	d3.select(self.frameElement).style("height", "800px");

	function update_auff(source) {

	  // Compute the new tree layout.
	  var nodes = tree.nodes(root).reverse(),
	      links = tree.links(nodes);

	  // Normalize for fixed-depth.
	  nodes.forEach(function(d) { d.y = d.depth * 120; });

	  // Update the nodes…
	  var node = svg02.selectAll("g.node")
	      .data(nodes, function(d) { return d.id || (d.id = ++i); });

	  // Enter any new nodes at the parent's previous position.
	  var nodeEnter = node.enter().append("g")
	      .attr("class", "node")
	      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
	      .on("click", click);

	  nodeEnter.append("circle")
	      .attr("r", 4.5)
	      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; })
		  
		  
	  nodeEnter.append("text")
	      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
	      .attr("dy", ".35em")
	      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
		  .text(function(d) { return d.name; })
		  .on("click", clickCompare) //Anklicken der Auffälligkeit, um Vorkommnisliste zu laden
	      .style("fill-opacity", .6);

	  // Transition nodes to their new position.
	  var nodeUpdate = node.transition()
	      .duration(duration)
	      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

	  nodeUpdate.select("#dynamicTree").select("circle")
	      .attr("r", 4.5)
	      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });
		  
		  
	  nodeUpdate.select("#dynamicTree").select("text")
	      .style("fill-opacity", 1);

	  // Transition exiting nodes to the parent's new position.
	  var nodeExit = node.exit().transition()
	      .duration(duration)
	      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
	      .remove();

	  nodeExit.select("#dynamicTree").select("circle")
	      .attr("r", 1e-6);

	  nodeExit.select("text")
	      .style("fill-opacity", 1e-6);

	  // Update the links…
	  var link = svg02.selectAll("path.link")
	      .data(links, function(d) { return d.target.id; });

	  // Enter any new links at the parent's previous position.
	  link.enter().insert("path", "g")
	      .attr("class", "link")
	      .attr("d", function(d) {
	        var o = {x: source.x0, y: source.y0};
	        return diagonal({source: o, target: o});
	      });

	  // Transition links to their new position.
	  link.transition()
	      .duration(duration)
	      .attr("d", diagonal);

	  // Transition exiting nodes to the parent's new position.
	  link.exit().transition()
	      .duration(duration)
	      .attr("d", function(d) {
	        var o = {x: source.x, y: source.y};
	        return diagonal({source: o, target: o});
	      })
	      .remove();

	  // Stash the old positions for transition.
	  nodes.forEach(function(d) {
	    d.x0 = d.x;
	    d.y0 = d.y;
	  });
	}

	// Toggle children on click.
	function click(d) {
	  if (d.children) {				//einklappen
		d._children = d.children;
	    d.children = null;
	  } else {						//ausklappen
	    d.children = d._children;
	    d._children = null;	
	  }
	  update_auff(d);
	};


/*Code: Gwenlyn Tiedemann*/
// dynamisches Laden der zugehörigen Quellenstellen aus der XML als Auflistung
function clickCompare(){
	
	//Elemente leeren, um neuen Inhalt anzuzeigen
	$('#showAuf').empty();
	$('#showQuel').empty();
	$('#QuelList').empty();
	$('#quellAnsicht').hide()

	//ausgewählte Auffälligkeit
	  var selected_object = $(this);
	  
	  //Ajax-Aufruf, um die XML zu parsen
	  $.ajax({
	      type: "GET",
          url: "data/Sarazenen_Final_Map_v0.1.xml",
	      dataType: "xml",
	      success: function(xml){
	      	 	  	
	  		  var dokument = $(xml).find('Dokumente');
	  		var ortlist;
	  
	  		//Für jedes Dokument die Daten beziehen
	   for ( i = 0; i < dokument.length; i++){
	   	var werkid = $(dokument[i]).find('WerkId');
	   	var werktitel = $(dokument[i]).find('WerkTitel');
	   	var quelle = $(dokument[i]).find('Quelle');
	   		//Für jede Quellenstelle im Dokument die Daten beziehen
	   		for (var ii = 0; ii < quelle.length; ii++){
	   			var quellenid = $(quelle[ii]).find('QuellenId');
  				
	   			    	 var Schlagwort = $(quelle[ii]).find('Schlagwort')
	   			    	 for(var iii = 0; iii < Schlagwort.length;iii++){
	   			    		 var auffaellList = $(Schlagwort[iii]);
	   			    		 
	         //Wenn die ausgewählte Auffälligkeit in einer Quelle gefunden wurde, werden die Quellendaten ausgegeben. 			   			    	
	   			if(selected_object.text() == auffaellList.text())
	   				{
	   				var aufHeader = "<p>In folgenden Quellen wird die Auffälligkeit  '<b>"+ selected_object.text() +"</b>'  erwähnt:  </p>";
	    				$('#showSelected').html(aufHeader);
	    				$('#showQuel').append("<p> <span  id='dokument_"+i+"_"+ii+"'><a href='#quellAnsicht'> "+werkid.text()+": "+werktitel.text()+"</a></span>" +
	    			  	  		" <br> Quellenstelle: "+quellenid.text()+ " </p>");
	    				
 	    			  	//Wenn eine Quelle angeklickt wird, wird ihr Inhalt angezeigt
	    				$('#dokument_' + i+'_'+ii).click(displayWerkInfo.bind($('#dokument_' + i+'_'+ii), dokument[i])) //Übergabe der  bestimmten Quelle als Objekt

	   				}
	   			      } 
	   		}
	   }
	      },
		  error: function() {
		  alert("An error occurred while processing XML file.");
		  }
		  }); // Ende Ajax-Aufruf


		}; // /.clickCompare()

	 //Laden der Inhalte für die angeklickte Quelle
	  	function displayWerkInfo(xml) {

	  		//Elemente leeren, um neuen Inhalt anzuzeigen	  		
	  		$('#QuelList').empty();
	  		$('#showQuelInfo').empty(); 
	  		$('#showMoreContent').empty();
	  		
	  		$('#quellAnsicht').show(); //Quellentext Vollansicht anzeigen
	  		
		  	$('#QuelList').append('<h4>Quellenstellen</h4>');
		  	
		  	
	  		var quelle = $(xml).find('Quelle')
		  	      for(var j = 0; j < quelle.length;j++){
		  	    	  //Quellenstelle Liste zu der bestimmten Quelle unter die blaue Box als Liste setzen
			  	      $('#QuelList').append('<li id="quelle_' + j +'"><a href="#quellAnsicht">' + $(quelle[j]).find('QuellenId').text() +'</a></li>');
			  	      //Anklicken der Id einer Quellenstellen => laden der Inhalte
			  	      $('#quelle_' + j ).click(displayQuelInfo.bind($('#quelle_' + j), quelle[j]));
		  	      }
	  		
		  	//finden der XML-Taginhalte
	  		  WerkTitel= $(xml).find('WerkTitel').text();							//Werktitel
		  	  WerkId = $(xml).find('WerkId').text();								//WerkId
		  	  LebensdatenVerfasser = $(xml).find('LebensdatenVerfasser').text();	//Lebensdaten des Verfasser
		  	  Abfassungszeitraum = $(xml).find('Abfassungszeitraum').text();		//Abfassungszeitraum der Quelle
		  	  Abfassungsort = $(xml).find('Abfassungsort').text();					//Abfassungsort der Quelle
		  	  Editionshinweise = $(xml).find('Editionshinweise').text();			//Editionshinweis
		  	  Werkinformation = $(xml).find('Werkinformation').text();				//Werkinformationen
		  	  
		  	  
		 // Einfügen der XML-Inhalte ins Template
		  	  //Header: WerkTitel und Alternativnamen
		  	  var werkHeader = "<h1 class='main-title'>"+WerkTitel+"</h1> <p class='sub-title' id='altTitel'> </p>";
		  	  $('#showTitel').html(werkHeader);

		  	  //Main Content: Abfassungszeitraum, Abfassungsort, Regionen, Editionshinweise und Werkinformationen
		  	  var werkInfo = "<p><b>Abfassungszeitraum:</b> "+Abfassungszeitraum+"</p><p><b>Abfassungsort:</b> "+Abfassungsort+"</p><p><b>Region:</b><ul id='showRegion'></ul></p><p><b>Editionshinweise:</b> <p>"+Editionshinweise+"</p><hr><p><b>Allgemeines </b></p>"+Werkinformation+"</p></hr>";
		  	  $('#showContent').html(werkInfo);
		  	  
		  	  //blaue Box: Autor mit Lebensdaten
		  	  var verfInfo = "<div  class='sidebar-module-inset'><h4>Verfasser</h4><p><span id='showAuthor'></span>("+LebensdatenVerfasser+ ")</br></p></div>";
		  	  $('#showInfo').html(verfInfo);
		  	  
	  	//Finden und Ausgeben der untergeordneten Inhalte
		  	  var altTitelArray = [];
		  	  var altTitelList;
	  	var altTitel = $(xml).find('Alternativtitel')		//Alternativtitel
	      for(var i = 0; i < altTitel.length;i++){
	    	  var titel = $(altTitel[i]).find('Titel')
	    	  for (var ii = 0; ii < titel.length; ii++){
	    		  altTitelArray[ii] = $(titel[ii]).text();
	    		  altTitelList = altTitelArray.join(', ');	//Einzelne Titel werden mit Kommas getrennt und in einer Zeile angezeigt.
	    	  }	  	    	  
	    	  $('#altTitel').append(altTitelList);
	      }
	  	
	  	
	  	autoren = $(xml).find('Autoren')					//Autoren
	      for(var i = 0; i < autoren.length;i++){
	    	 autor = $(autoren[i]).find('Autor')
	    	  for (var ii = 0; ii < autor.length; ii++){
	    		  $('#showAuthor').append($(autor[ii]).text()+'<br>');
	    	  }	  	    	  
	      }
	  	
	  	var regionen = $(xml).find('Regionen')				//Regionen
	      for(var i = 0; i < regionen.length;i++){
	    	 var region = $(regionen[i]).find('Region')
	    	  for (var ii = 0; ii < region.length; ii++){
	    		  $('#showRegion').append($(region[ii]).text()+'<br>');
	    	  }	  	    	  
	      }


	  	}// /.displayWerkInfo()
	  	
	  	
		  //Laden der Inhalte für die angeklickte Quellenstelle
	  	function displayQuelInfo(xml) {
	  		
	  		//Elemente leeren, um neuen Inhalt anzuzeigen
	  		$('#showTitel').empty();
	  		$('#showContent').empty();
	  		$('#showInfo').empty();
		  	$('#showMoreContent').empty();

	  		// finden der XML-Inhalte
		  	  var QuellenId= $(xml).find('QuellenId').text();					//QuellenId
		  	  var Zitation = $(xml).find('Zitation').text();					//Zitation
		  	  var ZeitangabeQuelle = $(xml).find('ZeitangabeQuelle').text();	//(Quellen-)Zeitangabe
		  	  var Inhaltsangabe = $(xml).find('Inhaltsangabe').text();			//Inhalstangabe
		  	  var VolltextOrig = $(xml).find('VolltextOriginalsprache').text();	//Volltext Original
		  	  var VolltextUeb = $(xml).find('VolltextUebersetzung').text();		//Volltext Übersetzung
		  	  var ZitationsUeb = $(xml).find('ZitationUebersetzung').text();	//Hinweis zur Übersetzung
		  	  var Interaktion = $(xml).find('Interaktion').text();				//Interaktion
		  	  var Anmerkungen = $(xml).find('Anmerkungen').text();				//Anmerkungen
		  	  		  	  
	  // Einfügen der XML-Inhalte ins Template
		  	  //Header: QuellenID und Zitation
		  	  var quelHeader = "<h1 class='main-title'>Quellenstelle: "+QuellenId+"</h1><p class='sub-title'>"+Zitation+"</p>"
		  	  $('#showTitel').html(quelHeader);
		  	  
		  	  //Main-Content: zeitliche Angaben (Quellen + Wissenschaftlich), Inhaltsangabe, Volltext Original und Übersetzung, sowie Hinweise zur Übersetzung
		  	  var quelInfo = "<p><b>zeitliche (Quellen-)Angabe: </b>" +ZeitangabeQuelle+"</p><p><b>zeitliche (wissenschaftliche) Einordnung: </b><span id='zeitwiss'></span></p><p><b>Inhaltsangabe:</b> " +Inhaltsangabe+"</p><hr> <p> <b>Volltext </b></p><p>"+VolltextOrig+"</p></hr><hr><p><b>Übersetzung:  </b></p><p>"+VolltextUeb+"</p></hr><hr><p><b>Hinweise zur Übersetzung (Zitation):</b></p><p>"+ZitationsUeb+"</p></hr><br></br>";
		  	  $('#showContent').html(quelInfo);
		  	  
		  	  //Blaue-Box: Werktitel, Abfassungszeitraum, Abfassungsort, Verfasser mit Lebensdaten
		  	  var werk = "<div  class='sidebar-module-inset'><h4> Werk </h4><p>"+WerkTitel+"</p><p>"+Abfassungszeitraum+"</p><p>"+Abfassungsort+"</p><h5><b>Verfasser</b></h5><p><div id='showAuthor'></div> ("+LebensdatenVerfasser+")</p></div>";
		  	  $('#showInfo').html(werk);
		  	  
		  	  //Zusätzliche Informationen zu den Quellen (von dem DFG-Projekt ergänzt): Geographische Stichworte, Angabe der Betiligten und Interaktion, Auffälligkeiten und Anmerkungen
		  	  var moreInfo = "<div class='panel panel-default'><div class='panel-body'><p><b>geographisches Stichwort: </b><ul id='showGeoStichwort'></ul></p><p><b>Bericht über ein/mehrere Individuum/en oder Kollektive: </b><ul id='showBeteiligte'></ul></p><p><b>Interaktion (j/n): </b>"+Interaktion+"</p><p><b>Auffälligkeiten: </b><ul id='showAufaell'></ul></p><p><b>Suchbegriffe: </b><ul id='showSuchworte'></ul></p><p><b>Anmerkungen: </b></p><p>"+Anmerkungen+"></p></div></div>";
		  	  $('#showMoreContent').html(moreInfo);
		  	  
		  	  //erneutes Aufrufen und ausgeben des Autoren für die blaue Info-Box
		  	  for(var i = 0; i < autoren.length;i++){
			    	 autor = $(autoren[i]).find('Autor')
			    	  for (var ii = 0; ii < autor.length; ii++){
			    		  $('#showAuthor').append($(autor[ii]).text()+'<br>');
			    	  }	  	    	  
			      }
		  	  
		  	  //finden und ausgeben der untergeordneten Inhalte
		  	  
		    	var  datumArray = [];														
	    		var DatumList;
			  	var ZeitWiss = $(xml).find('ZeitangabeWissenschaft')			//wiss. Zeiteinordnung
			      for(var i = 0; i < ZeitWiss.length;i++){
			    	  var Datum = $(ZeitWiss[i]).find('Datum')
			    	  for (var ii = 0; ii < Datum.length; ii++){
			    		datumArray[ii] = $(Datum[ii]).attr('Text');
			    		DatumList = datumArray.join(', ');  		    		  //bei mehreren Angaben werden diese mit Kommas getrennt und in einer Zeile angezeigt.
			    	  }
			    		  $('#zeitwiss').append(DatumList);
			    	  }	 	    	  

		  	var GeoStichwort = $(xml).find('GeographischesStichwort')					//geographisches Stichwort als Liste
		      for(var i = 0; i < GeoStichwort.length;i++){
		    	 var ort = $(GeoStichwort[i]).find('Ort')
		    	  for (var ii = 0; ii < ort.length; ii++){
		    		  $('#showGeoStichwort').append('<li>'+$(ort[ii]).text()+'</li>');
		    	  }	  	    	  
		      }
		  	var Beteiligte = $(xml).find('Beteiligte')									//Beteiligte als Liste
		      for(var i = 0; i < Beteiligte.length;i++){
		    	 var Beteiligter = $(Beteiligte[i]).find('Beteiligter')
		    	  for (var ii = 0; ii < Beteiligter.length; ii++){
		    		  $('#showBeteiligte').append('<li>'+$(Beteiligter[ii]).text()+'</li>');
		    	  }	  	    	  
		      }
		  	var Auffaelligkeiten = $(xml).find('Auffaelligkeiten')						//Auffälligkeiten als Liste
		      for(var i = 0; i < Auffaelligkeiten.length;i++){
		    	 var Schlagwort = $(Auffaelligkeiten[i]).find('Schlagwort')
		    	  for (var ii = 0; ii < Schlagwort.length; ii++){
		    		  $('#showAufaell').append('<li>'+$(Schlagwort[ii]).text()+'</li>');
		    	  }	  	    	  
		      }
		  	
		  	
		  	var Suchbegriffe = $(xml).find('Suchbegriffe')								//Suchbegriffe als Liste
		      for(var i = 0; i < Suchbegriffe.length;i++){
		    	 var Suchwort = $(Suchbegriffe[i]).find('Suchwort')
		    	  for (var ii = 0; ii < Suchwort.length; ii++){
		    		  $('#showSuchworte').append('<li>'+$(Suchwort[ii]).text()+'</li>');
		    	  }	  	    	  
		      }
		  	
		
	  	} // /.displayQuelInfo()
	  	
	  	
		//fixed Position für die Vorkommniss-Liste 
		var vorkommnisPosition = $('#vorkommnisAnsicht').offset();
		$(window).scroll(function(){
		        if($(window).scrollTop() > vorkommnisPosition.top){	
		              $('#vorkommnisAnsicht').css('position','fixed').css('top','0');
		        } 
		        
		        else {
		            $('#vorkommnisAnsicht').css('position','static');
		        }    
		});
		

});
